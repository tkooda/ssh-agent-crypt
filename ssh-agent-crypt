#!/usr/bin/python

## 2017-04-06 : tkooda : Use SSH keys from ssh-agent to read / write encrypted (e.g. config) data

## NOTES:
##  - 'set' reads from stdin
##  - 'get' writes to stdout
##  - order and case are significant for qualifiers
##  - use openssl compatible method of encryption/decryption
##  - obtain SSH key md5 fingerprint with:  `ssh-add -lE md5 |sed 's,MD5:,,g;s,:,,g'`

## EXAMPLE USAGE:
##   echo myPassword123 | ssh-agent-crypt set 7bcd0ca5aacd1608f26bff3f863da65c imaps myusername example.com
##   ssh-agent-crypt get 7bcd0ca5aacd1608f26bff3f863da65c imaps myusername example.com


import os
import sys
import paramiko
from hashlib import md5 # use md5 because `ssh-add -lE md5` supports it, and sha256 hashes are base64 with slashes
from Crypto.Cipher import AES
from Crypto import Random


def derive_key_and_iv(password, salt, key_length, iv_length):
    d = d_i = ''
    while len(d) < key_length + iv_length:
        d_i = md5(d_i + password + salt).digest()
        d += d_i
    return d[:key_length], d[key_length:key_length+iv_length]


def encrypt(out_file, password, key_length=32):
    bs = AES.block_size
    salt = Random.new().read(bs - len('Salted__'))
    key, iv = derive_key_and_iv(password, salt, key_length, bs)
    cipher = AES.new(key, AES.MODE_CBC, iv)
    out_file.write('Salted__' + salt)
    finished = False
    while not finished:
        chunk = sys.stdin.read(1024 * bs)
        if len(chunk) == 0 or len(chunk) % bs != 0:
            padding_length = bs - (len(chunk) % bs)
            chunk += padding_length * chr(padding_length)
            finished = True
        out_file.write(cipher.encrypt(chunk))


def decrypt(in_file, password, key_length=32):
    bs = AES.block_size
    salt = in_file.read(bs)[len('Salted__'):]
    key, iv = derive_key_and_iv(password, salt, key_length, bs)
    cipher = AES.new(key, AES.MODE_CBC, iv)
    next_chunk = ''
    finished = False
    while not finished:
        chunk, next_chunk = next_chunk, cipher.decrypt(in_file.read(1024 * bs))
        if len(next_chunk) == 0:
            padding_length = ord(chunk[-1])
            if padding_length < 1 or padding_length > bs:
               raise ValueError("bad decrypt pad (%d)" % padding_length)
            # all the pad-bytes must be the same
            if chunk[-padding_length:] != (padding_length * chr(padding_length)):
               # this is similar to the bad decrypt:evp_enc.c from openssl program
               raise ValueError("bad decrypt")
            chunk = chunk[:-padding_length]
            finished = True
        sys.stdout.write(chunk)


if len( sys.argv ) < 4 or ( sys.argv[1] != "get" and sys.argv[1] != "set" ):
	print >>sys.stderr, "usage: %s <get|set> <key_md5> <qualifiers..>" % os.path.basename( sys.argv[ 0 ] )
	sys.exit( 2 )

get_or_set = sys.argv[ 1 ]
key_md5 = sys.argv[ 2 ]
qualifiers = sys.argv[ 3: ] # order and case are significant

path_config_base = os.path.join( os.getenv( "SSH_AGENT_CRYPT", os.path.expanduser( "~/.config/ssh-agent-crypt" ) ), *qualifiers )
qualifier_md5 = md5( repr( qualifiers ).encode("utf-8") ).hexdigest()

agent = paramiko.Agent()
agent_keys = agent.get_keys()

if not agent_keys:
	print >>sys.stderr, "ERROR: no SSH keys found in ssh-agent"
	sys.exit( 3 )

for key in agent_keys:
	if key.get_fingerprint().encode('hex_codec') != key_md5:
		continue
	
	path_file = os.path.join( path_config_base, key.get_fingerprint().encode('hex_codec') )
	password = key.sign_ssh_data( qualifier_md5 )
	
	if get_or_set == "get":
		if not os.path.isfile( path_file ):
			continue
		with open( path_file, 'rb' ) as fp:
			try:
				decrypt( fp, password ) # decrypt to stdout
			except:
				print >>sys.stderr, "ERROR: decryption failed:", path_file
				sys.exit( 4 )
		sys.exit( 0 )
	
	elif get_or_set == "set":
		os.umask( 077 )
		if not os.path.isdir( os.path.dirname( path_file ) ):
			os.makedirs( os.path.dirname( path_file ) )
		with open( path_file + ".tmp", 'wb' ) as fp:
			try:
				encrypt( fp, password ) # encrypt from stdin
			except:
				print >>sys.stderr, "ERROR: encryption failed:", path_file
				sys.exit( 4 )
		os.rename( path_file + ".tmp", path_file ) # for atomic write
		sys.exit( 0 )

print >>sys.stderr, "ERROR: %s failed, key (%s) not found in ssh-agent" % ( get_or_set, key_md5 )
sys.exit( 1 )
